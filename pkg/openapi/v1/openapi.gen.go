// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for BookingStatus.
const (
	BookingStatusCancelled BookingStatus = "cancelled"
	BookingStatusCompleted BookingStatus = "completed"
	BookingStatusConfirmed BookingStatus = "confirmed"
	BookingStatusOngoing   BookingStatus = "ongoing"
	BookingStatusPending   BookingStatus = "pending"
)

// Defines values for BookingType.
const (
	Package12 BookingType = "package_12"
	Package4  BookingType = "package_4"
	Package8  BookingType = "package_8"
	Single    BookingType = "single"
	Trial     BookingType = "trial"
)

// Defines values for BusinessType.
const (
	ArtStudio       BusinessType = "art_studio"
	IndividualCoach BusinessType = "individual_coach"
	SwimmingSchool  BusinessType = "swimming_school"
	TutoringCenter  BusinessType = "tutoring_center"
)

// Defines values for ClassType.
const (
	ClassTypeLargeGroup ClassType = "large_group"
	ClassTypePrivate    ClassType = "private"
	ClassTypeSmallGroup ClassType = "small_group"
)

// Defines values for CoachStatus.
const (
	CoachStatusActive   CoachStatus = "active"
	CoachStatusInactive CoachStatus = "inactive"
)

// Defines values for Gender.
const (
	Female Gender = "female"
	Male   Gender = "male"
)

// Defines values for PaymentStatus.
const (
	PaymentStatusExpired  PaymentStatus = "expired"
	PaymentStatusFailed   PaymentStatus = "failed"
	PaymentStatusPending  PaymentStatus = "pending"
	PaymentStatusRefunded PaymentStatus = "refunded"
	PaymentStatusSuccess  PaymentStatus = "success"
)

// Defines values for PaymentStatusEnum.
const (
	Paid     PaymentStatusEnum = "paid"
	Refunded PaymentStatusEnum = "refunded"
	Unpaid   PaymentStatusEnum = "unpaid"
)

// Defines values for ServiceDetailCoachesStatus.
const (
	ServiceDetailCoachesStatusActive   ServiceDetailCoachesStatus = "active"
	ServiceDetailCoachesStatusInactive ServiceDetailCoachesStatus = "inactive"
)

// Defines values for ServiceStatus.
const (
	ServiceStatusActive   ServiceStatus = "active"
	ServiceStatusDraft    ServiceStatus = "draft"
	ServiceStatusInactive ServiceStatus = "inactive"
)

// Defines values for SessionStatus.
const (
	Cancelled SessionStatus = "cancelled"
	Completed SessionStatus = "completed"
	NoShow    SessionStatus = "no_show"
	Scheduled SessionStatus = "scheduled"
)

// Defines values for SkillLevel.
const (
	SkillLevelAdvanced     SkillLevel = "advanced"
	SkillLevelAllLevels    SkillLevel = "all_levels"
	SkillLevelBeginner     SkillLevel = "beginner"
	SkillLevelIntermediate SkillLevel = "intermediate"
)

// Defines values for UserRole.
const (
	UserRoleAdmin  UserRole = "admin"
	UserRoleCoach  UserRole = "coach"
	UserRoleParent UserRole = "parent"
	UserRoleVendor UserRole = "vendor"
)

// Defines values for UserStatus.
const (
	UserStatusActive    UserStatus = "active"
	UserStatusInactive  UserStatus = "inactive"
	UserStatusSuspended UserStatus = "suspended"
)

// Defines values for VendorStatus.
const (
	Active    VendorStatus = "active"
	Pending   VendorStatus = "pending"
	Rejected  VendorStatus = "rejected"
	Suspended VendorStatus = "suspended"
)

// Defines values for ClassTypeParam.
const (
	ClassTypeParamLargeGroup ClassTypeParam = "large_group"
	ClassTypeParamPrivate    ClassTypeParam = "private"
	ClassTypeParamSmallGroup ClassTypeParam = "small_group"
)

// Defines values for DayParam.
const (
	DayParamFriday    DayParam = "friday"
	DayParamMonday    DayParam = "monday"
	DayParamSaturday  DayParam = "saturday"
	DayParamSunday    DayParam = "sunday"
	DayParamThursday  DayParam = "thursday"
	DayParamTuesday   DayParam = "tuesday"
	DayParamWednesday DayParam = "wednesday"
)

// Defines values for PeriodParam.
const (
	PeriodParamDay   PeriodParam = "day"
	PeriodParamMonth PeriodParam = "month"
	PeriodParamWeek  PeriodParam = "week"
	PeriodParamYear  PeriodParam = "year"
)

// Defines values for SkillLevelParam.
const (
	SkillLevelParamAdvanced     SkillLevelParam = "advanced"
	SkillLevelParamAllLevels    SkillLevelParam = "all_levels"
	SkillLevelParamBeginner     SkillLevelParam = "beginner"
	SkillLevelParamIntermediate SkillLevelParam = "intermediate"
)

// Defines values for GetStatisticsParamsPeriod.
const (
	GetStatisticsParamsPeriodDay   GetStatisticsParamsPeriod = "day"
	GetStatisticsParamsPeriodMonth GetStatisticsParamsPeriod = "month"
	GetStatisticsParamsPeriodWeek  GetStatisticsParamsPeriod = "week"
	GetStatisticsParamsPeriodYear  GetStatisticsParamsPeriod = "year"
)

// Defines values for SearchServicesParamsSkillLevel.
const (
	Advanced     SearchServicesParamsSkillLevel = "advanced"
	AllLevels    SearchServicesParamsSkillLevel = "all_levels"
	Beginner     SearchServicesParamsSkillLevel = "beginner"
	Intermediate SearchServicesParamsSkillLevel = "intermediate"
)

// Defines values for SearchServicesParamsClassType.
const (
	LargeGroup SearchServicesParamsClassType = "large_group"
	Private    SearchServicesParamsClassType = "private"
	SmallGroup SearchServicesParamsClassType = "small_group"
)

// Defines values for SearchServicesParamsDay.
const (
	SearchServicesParamsDayFriday    SearchServicesParamsDay = "friday"
	SearchServicesParamsDayMonday    SearchServicesParamsDay = "monday"
	SearchServicesParamsDaySaturday  SearchServicesParamsDay = "saturday"
	SearchServicesParamsDaySunday    SearchServicesParamsDay = "sunday"
	SearchServicesParamsDayThursday  SearchServicesParamsDay = "thursday"
	SearchServicesParamsDayTuesday   SearchServicesParamsDay = "tuesday"
	SearchServicesParamsDayWednesday SearchServicesParamsDay = "wednesday"
)

// AvailableDate defines model for AvailableDate.
type AvailableDate struct {
	Date  *openapi_types.Date `json:"date,omitempty"`
	Slots *[]struct {
		AvailableSlots *int `json:"available_slots,omitempty"`
		Coach          *struct {
			Id   *int64  `json:"id,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"coach,omitempty"`
		EndTime    *string `json:"end_time,omitempty"`
		ScheduleId *int64  `json:"schedule_id,omitempty"`
		StartTime  *string `json:"start_time,omitempty"`
	} `json:"slots,omitempty"`
}

// Booking defines model for Booking.
type Booking struct {
	BookingNumber *string      `json:"booking_number,omitempty"`
	BookingType   *BookingType `json:"booking_type,omitempty"`
	Child         *Child       `json:"child,omitempty"`
	Coach         *struct {
		FullName *string `json:"full_name,omitempty"`
		Id       *int64  `json:"id,omitempty"`
		Photo    *string `json:"photo,omitempty"`
	} `json:"coach,omitempty"`
	CompletedSessions *int       `json:"completed_sessions,omitempty"`
	CreatedAt         *time.Time `json:"created_at,omitempty"`
	Id                *int64     `json:"id,omitempty"`
	NextSession       *struct {
		EndTime     *string             `json:"end_time,omitempty"`
		SessionDate *openapi_types.Date `json:"session_date,omitempty"`
		StartTime   *string             `json:"start_time,omitempty"`
	} `json:"next_session,omitempty"`
	PaymentStatus *PaymentStatusEnum `json:"payment_status,omitempty"`
	Service       *struct {
		Category *string `json:"category,omitempty"`
		Id       *int64  `json:"id,omitempty"`
		Name     *string `json:"name,omitempty"`
	} `json:"service,omitempty"`
	Status        *BookingStatus `json:"status,omitempty"`
	TotalAmount   *float64       `json:"total_amount,omitempty"`
	TotalSessions *int           `json:"total_sessions,omitempty"`
	Vendor        *struct {
		BusinessName *string `json:"business_name,omitempty"`
		Id           *int64  `json:"id,omitempty"`
		Logo         *string `json:"logo,omitempty"`
	} `json:"vendor,omitempty"`
}

// BookingDetail defines model for BookingDetail.
type BookingDetail struct {
	BookingNumber *string      `json:"booking_number,omitempty"`
	BookingType   *BookingType `json:"booking_type,omitempty"`
	Child         *Child       `json:"child,omitempty"`
	Coach         *struct {
		FullName *string `json:"full_name,omitempty"`
		Id       *int64  `json:"id,omitempty"`
		Photo    *string `json:"photo,omitempty"`
	} `json:"coach,omitempty"`
	CompletedSessions *int       `json:"completed_sessions,omitempty"`
	CreatedAt         *time.Time `json:"created_at,omitempty"`
	Id                *int64     `json:"id,omitempty"`
	NextSession       *struct {
		EndTime     *string             `json:"end_time,omitempty"`
		SessionDate *openapi_types.Date `json:"session_date,omitempty"`
		StartTime   *string             `json:"start_time,omitempty"`
	} `json:"next_session,omitempty"`
	ParentNotes   *string            `json:"parent_notes,omitempty"`
	Payment       *Payment           `json:"payment,omitempty"`
	PaymentStatus *PaymentStatusEnum `json:"payment_status,omitempty"`
	Service       *struct {
		Category *string `json:"category,omitempty"`
		Id       *int64  `json:"id,omitempty"`
		Name     *string `json:"name,omitempty"`
	} `json:"service,omitempty"`
	Sessions      *[]BookingSession `json:"sessions,omitempty"`
	Status        *BookingStatus    `json:"status,omitempty"`
	TotalAmount   *float64          `json:"total_amount,omitempty"`
	TotalSessions *int              `json:"total_sessions,omitempty"`
	Vendor        *struct {
		BusinessName *string `json:"business_name,omitempty"`
		Id           *int64  `json:"id,omitempty"`
		Logo         *string `json:"logo,omitempty"`
	} `json:"vendor,omitempty"`
}

// BookingSession defines model for BookingSession.
type BookingSession struct {
	Attended      *bool               `json:"attended,omitempty"`
	CoachNotes    *string             `json:"coach_notes,omitempty"`
	CompletedAt   *time.Time          `json:"completed_at,omitempty"`
	EndTime       *string             `json:"end_time,omitempty"`
	Id            *int64              `json:"id,omitempty"`
	Rating        *int                `json:"rating,omitempty"`
	SessionDate   *openapi_types.Date `json:"session_date,omitempty"`
	SessionNumber *int                `json:"session_number,omitempty"`
	StartTime     *string             `json:"start_time,omitempty"`
	Status        *SessionStatus      `json:"status,omitempty"`
}

// BookingStatus defines model for BookingStatus.
type BookingStatus string

// BookingType defines model for BookingType.
type BookingType string

// BusinessType defines model for BusinessType.
type BusinessType string

// Category defines model for Category.
type Category struct {
	ColorHex     *string `json:"color_hex,omitempty"`
	Description  *string `json:"description,omitempty"`
	DisplayOrder *int    `json:"display_order,omitempty"`
	Icon         *string `json:"icon,omitempty"`
	Id           *int64  `json:"id,omitempty"`
	Name         *string `json:"name,omitempty"`
	Slug         *string `json:"slug,omitempty"`
}

// Child defines model for Child.
type Child struct {
	Age          *int                `json:"age,omitempty"`
	CreatedAt    *time.Time          `json:"created_at,omitempty"`
	DateOfBirth  *openapi_types.Date `json:"date_of_birth,omitempty"`
	Gender       *Gender             `json:"gender,omitempty"`
	Id           *int64              `json:"id,omitempty"`
	Name         *string             `json:"name,omitempty"`
	Nickname     *string             `json:"nickname,omitempty"`
	Photo        *string             `json:"photo,omitempty"`
	SpecialNeeds *string             `json:"special_needs,omitempty"`
}

// ClassType defines model for ClassType.
type ClassType string

// Coach defines model for Coach.
type Coach struct {
	Bio            *string `json:"bio,omitempty"`
	Certifications *[]struct {
		FileUrl *string `json:"file_url,omitempty"`
		Issuer  *string `json:"issuer,omitempty"`
		Name    *string `json:"name,omitempty"`
		Year    *int    `json:"year,omitempty"`
	} `json:"certifications,omitempty"`
	Education       *string      `json:"education,omitempty"`
	ExperienceYears *int         `json:"experience_years,omitempty"`
	FullName        *string      `json:"full_name,omitempty"`
	Id              *int64       `json:"id,omitempty"`
	IsFeatured      *bool        `json:"is_featured,omitempty"`
	Photo           *string      `json:"photo,omitempty"`
	Specializations *[]string    `json:"specializations,omitempty"`
	Status          *CoachStatus `json:"status,omitempty"`
}

// CoachStatus defines model for Coach.Status.
type CoachStatus string

// DefaultErrorResponse defines model for DefaultErrorResponse.
type DefaultErrorResponse struct {
	Error struct {
		Code    *string `json:"code,omitempty"`
		Details *[]struct {
			Field   *string `json:"field,omitempty"`
			Message *string `json:"message,omitempty"`
		} `json:"details,omitempty"`
		Message string `json:"message"`
	} `json:"error"`
}

// Gender defines model for Gender.
type Gender string

// Pagination defines model for Pagination.
type Pagination struct {
	Limit      *int `json:"limit,omitempty"`
	Page       *int `json:"page,omitempty"`
	Total      *int `json:"total,omitempty"`
	TotalPages *int `json:"total_pages,omitempty"`
}

// Payment defines model for Payment.
type Payment struct {
	Amount        *float64       `json:"amount,omitempty"`
	ExpiredAt     *time.Time     `json:"expired_at,omitempty"`
	PaidAt        *time.Time     `json:"paid_at,omitempty"`
	PaymentMethod *string        `json:"payment_method,omitempty"`
	PaymentNumber *string        `json:"payment_number,omitempty"`
	PaymentUrl    *string        `json:"payment_url,omitempty"`
	Status        *PaymentStatus `json:"status,omitempty"`
}

// PaymentStatus defines model for Payment.Status.
type PaymentStatus string

// PaymentMethod defines model for PaymentMethod.
type PaymentMethod struct {
	Code           *string   `json:"code,omitempty"`
	Icon           *string   `json:"icon,omitempty"`
	Name           *string   `json:"name,omitempty"`
	Options        *[]string `json:"options,omitempty"`
	ProcessingTime *string   `json:"processing_time,omitempty"`
}

// PaymentStatusEnum defines model for PaymentStatusEnum.
type PaymentStatusEnum string

// Review defines model for Review.
type Review struct {
	ChildAge       *int       `json:"child_age,omitempty"`
	ChildEnjoyed   *bool      `json:"child_enjoyed,omitempty"`
	CreatedAt      *time.Time `json:"created_at,omitempty"`
	Id             *int64     `json:"id,omitempty"`
	ParentName     *string    `json:"parent_name,omitempty"`
	Photos         *[]string  `json:"photos,omitempty"`
	Rating         *int       `json:"rating,omitempty"`
	RespondedAt    *time.Time `json:"responded_at,omitempty"`
	ReviewText     *string    `json:"review_text,omitempty"`
	VendorResponse *string    `json:"vendor_response,omitempty"`
	WouldRecommend *bool      `json:"would_recommend,omitempty"`
}

// ReviewSummary defines model for ReviewSummary.
type ReviewSummary struct {
	AverageRating          *float64 `json:"average_rating,omitempty"`
	ChildEnjoyedPercentage *float64 `json:"child_enjoyed_percentage,omitempty"`
	RatingDistribution     *struct {
		N1 *int `json:"1,omitempty"`
		N2 *int `json:"2,omitempty"`
		N3 *int `json:"3,omitempty"`
		N4 *int `json:"4,omitempty"`
		N5 *int `json:"5,omitempty"`
	} `json:"rating_distribution,omitempty"`
	TotalReviews             *int     `json:"total_reviews,omitempty"`
	WouldRecommendPercentage *float64 `json:"would_recommend_percentage,omitempty"`
}

// Schedule defines model for Schedule.
type Schedule struct {
	AvailableSlots *int `json:"available_slots,omitempty"`
	Coach          *struct {
		Id   *int64  `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"coach,omitempty"`
	DayName   *string `json:"day_name,omitempty"`
	DayOfWeek *int    `json:"day_of_week,omitempty"`
	EndTime   *string `json:"end_time,omitempty"`
	Id        *int64  `json:"id,omitempty"`
	StartTime *string `json:"start_time,omitempty"`
}

// Service defines model for Service.
type Service struct {
	AgeMax          *int           `json:"age_max,omitempty"`
	AgeMin          *int           `json:"age_min,omitempty"`
	AgeRange        *string        `json:"age_range,omitempty"`
	ClassType       *ClassType     `json:"class_type,omitempty"`
	Description     *string        `json:"description,omitempty"`
	DurationMinutes *int           `json:"duration_minutes,omitempty"`
	Id              *int64         `json:"id,omitempty"`
	IsFeatured      *bool          `json:"is_featured,omitempty"`
	MaxParticipants *int           `json:"max_participants,omitempty"`
	Name            *string        `json:"name,omitempty"`
	Package12Price  *float64       `json:"package_12_price,omitempty"`
	Package4Price   *float64       `json:"package_4_price,omitempty"`
	Package8Price   *float64       `json:"package_8_price,omitempty"`
	PricePerSession *float64       `json:"price_per_session,omitempty"`
	Requirements    *string        `json:"requirements,omitempty"`
	SkillLevel      *SkillLevel    `json:"skill_level,omitempty"`
	Status          *ServiceStatus `json:"status,omitempty"`
	TrialPrice      *float64       `json:"trial_price,omitempty"`
	WhatWillLearn   *string        `json:"what_will_learn,omitempty"`
}

// ServiceDetail defines model for ServiceDetail.
type ServiceDetail struct {
	AgeMax    *int       `json:"age_max,omitempty"`
	AgeMin    *int       `json:"age_min,omitempty"`
	AgeRange  *string    `json:"age_range,omitempty"`
	ClassType *ClassType `json:"class_type,omitempty"`
	Coaches   *[]struct {
		Bio            *string `json:"bio,omitempty"`
		Certifications *[]struct {
			FileUrl *string `json:"file_url,omitempty"`
			Issuer  *string `json:"issuer,omitempty"`
			Name    *string `json:"name,omitempty"`
			Year    *int    `json:"year,omitempty"`
		} `json:"certifications,omitempty"`
		Education       *string                     `json:"education,omitempty"`
		ExperienceYears *int                        `json:"experience_years,omitempty"`
		FullName        *string                     `json:"full_name,omitempty"`
		Id              *int64                      `json:"id,omitempty"`
		IsFeatured      *bool                       `json:"is_featured,omitempty"`
		IsPrimary       *bool                       `json:"is_primary,omitempty"`
		Photo           *string                     `json:"photo,omitempty"`
		Specializations *[]string                   `json:"specializations,omitempty"`
		Status          *ServiceDetailCoachesStatus `json:"status,omitempty"`
	} `json:"coaches,omitempty"`
	Description     *string  `json:"description,omitempty"`
	DurationMinutes *int     `json:"duration_minutes,omitempty"`
	Id              *int64   `json:"id,omitempty"`
	IsFeatured      *bool    `json:"is_featured,omitempty"`
	MaxParticipants *int     `json:"max_participants,omitempty"`
	Name            *string  `json:"name,omitempty"`
	Package12Price  *float64 `json:"package_12_price,omitempty"`
	Package4Price   *float64 `json:"package_4_price,omitempty"`
	Package8Price   *float64 `json:"package_8_price,omitempty"`
	PricePerSession *float64 `json:"price_per_session,omitempty"`
	Pricing         *struct {
		Package12 *float64 `json:"package_12,omitempty"`
		Package4  *float64 `json:"package_4,omitempty"`
		Package8  *float64 `json:"package_8,omitempty"`
		Single    *float64 `json:"single,omitempty"`
		Trial     *float64 `json:"trial,omitempty"`
	} `json:"pricing,omitempty"`
	Requirements   *string        `json:"requirements,omitempty"`
	ReviewsPreview *[]Review      `json:"reviews_preview,omitempty"`
	Schedules      *[]Schedule    `json:"schedules,omitempty"`
	SkillLevel     *SkillLevel    `json:"skill_level,omitempty"`
	Status         *ServiceStatus `json:"status,omitempty"`
	TrialPrice     *float64       `json:"trial_price,omitempty"`
	Vendor         *Vendor        `json:"vendor,omitempty"`
	WhatWillLearn  *string        `json:"what_will_learn,omitempty"`
}

// ServiceDetailCoachesStatus defines model for ServiceDetail.Coaches.Status.
type ServiceDetailCoachesStatus string

// ServiceStatus defines model for ServiceStatus.
type ServiceStatus string

// ServiceWithVendor defines model for ServiceWithVendor.
type ServiceWithVendor struct {
	AgeMax          *int                `json:"age_max,omitempty"`
	AgeMin          *int                `json:"age_min,omitempty"`
	AgeRange        *string             `json:"age_range,omitempty"`
	AvailableDays   *[]string           `json:"available_days,omitempty"`
	Category        *Category           `json:"category,omitempty"`
	ClassType       *ClassType          `json:"class_type,omitempty"`
	Description     *string             `json:"description,omitempty"`
	DistanceKm      *float64            `json:"distance_km,omitempty"`
	DurationMinutes *int                `json:"duration_minutes,omitempty"`
	Id              *int64              `json:"id,omitempty"`
	IsFeatured      *bool               `json:"is_featured,omitempty"`
	MaxParticipants *int                `json:"max_participants,omitempty"`
	Name            *string             `json:"name,omitempty"`
	NextAvailable   *openapi_types.Date `json:"next_available,omitempty"`
	Package12Price  *float64            `json:"package_12_price,omitempty"`
	Package4Price   *float64            `json:"package_4_price,omitempty"`
	Package8Price   *float64            `json:"package_8_price,omitempty"`
	PricePerSession *float64            `json:"price_per_session,omitempty"`
	Requirements    *string             `json:"requirements,omitempty"`
	SkillLevel      *SkillLevel         `json:"skill_level,omitempty"`
	Status          *ServiceStatus      `json:"status,omitempty"`
	TrialPrice      *float64            `json:"trial_price,omitempty"`
	Vendor          *Vendor             `json:"vendor,omitempty"`
	WhatWillLearn   *string             `json:"what_will_learn,omitempty"`
}

// SessionStatus defines model for SessionStatus.
type SessionStatus string

// SkillLevel defines model for SkillLevel.
type SkillLevel string

// Statistics defines model for Statistics.
type Statistics struct {
	ActiveBookings   *int     `json:"active_bookings,omitempty"`
	CommissionEarned *float64 `json:"commission_earned,omitempty"`
	Growth           *struct {
		Bookings *string `json:"bookings,omitempty"`
		Revenue  *string `json:"revenue,omitempty"`
		Users    *string `json:"users,omitempty"`
	} `json:"growth,omitempty"`
	PopularCategories *[]struct {
		Name          *string  `json:"name,omitempty"`
		Percentage    *float64 `json:"percentage,omitempty"`
		TotalBookings *int     `json:"total_bookings,omitempty"`
	} `json:"popular_categories,omitempty"`
	TotalBookings *int     `json:"total_bookings,omitempty"`
	TotalCoaches  *int     `json:"total_coaches,omitempty"`
	TotalParents  *int     `json:"total_parents,omitempty"`
	TotalRevenue  *float64 `json:"total_revenue,omitempty"`
	TotalUsers    *int     `json:"total_users,omitempty"`
	TotalVendors  *int     `json:"total_vendors,omitempty"`
}

// User defines model for User.
type User struct {
	CreatedAt *time.Time  `json:"created_at,omitempty"`
	Email     *string     `json:"email,omitempty"`
	FullName  *string     `json:"full_name,omitempty"`
	Id        *int64      `json:"id,omitempty"`
	Phone     *string     `json:"phone,omitempty"`
	Role      *UserRole   `json:"role,omitempty"`
	Status    *UserStatus `json:"status,omitempty"`
}

// UserRole defines model for UserRole.
type UserRole string

// UserStatus defines model for UserStatus.
type UserStatus string

// Vendor defines model for Vendor.
type Vendor struct {
	Address       *string       `json:"address,omitempty"`
	Amenities     *[]string     `json:"amenities,omitempty"`
	BusinessName  *string       `json:"business_name,omitempty"`
	BusinessType  *BusinessType `json:"business_type,omitempty"`
	City          *string       `json:"city,omitempty"`
	CoverImage    *string       `json:"cover_image,omitempty"`
	Description   *string       `json:"description,omitempty"`
	District      *string       `json:"district,omitempty"`
	Id            *int64        `json:"id,omitempty"`
	Latitude      *float64      `json:"latitude,omitempty"`
	Logo          *string       `json:"logo,omitempty"`
	Longitude     *float64      `json:"longitude,omitempty"`
	Phone         *string       `json:"phone,omitempty"`
	Photos        *[]string     `json:"photos,omitempty"`
	RatingAvg     *float64      `json:"rating_avg,omitempty"`
	Status        *VendorStatus `json:"status,omitempty"`
	TotalBookings *int          `json:"total_bookings,omitempty"`
	TotalReviews  *int          `json:"total_reviews,omitempty"`
	Verified      *bool         `json:"verified,omitempty"`
	Whatsapp      *string       `json:"whatsapp,omitempty"`
}

// VendorBooking defines model for VendorBooking.
type VendorBooking struct {
	BookingNumber *string `json:"booking_number,omitempty"`
	Child         *struct {
		Age   *int    `json:"age,omitempty"`
		Name  *string `json:"name,omitempty"`
		Photo *string `json:"photo,omitempty"`
	} `json:"child,omitempty"`
	Coach *struct {
		FullName *string `json:"full_name,omitempty"`
	} `json:"coach,omitempty"`
	Id     *int64 `json:"id,omitempty"`
	Parent *struct {
		FullName *string `json:"full_name,omitempty"`
		Phone    *string `json:"phone,omitempty"`
		Whatsapp *string `json:"whatsapp,omitempty"`
	} `json:"parent,omitempty"`
	ParentNotes *string `json:"parent_notes,omitempty"`
	Service     *struct {
		Name *string `json:"name,omitempty"`
	} `json:"service,omitempty"`
	Session *struct {
		EndTime       *string             `json:"end_time,omitempty"`
		SessionDate   *openapi_types.Date `json:"session_date,omitempty"`
		SessionNumber *int                `json:"session_number,omitempty"`
		StartTime     *string             `json:"start_time,omitempty"`
		Status        *SessionStatus      `json:"status,omitempty"`
	} `json:"session,omitempty"`
}

// VendorDashboard defines model for VendorDashboard.
type VendorDashboard struct {
	Overview *struct {
		ActiveCoaches   *int     `json:"active_coaches,omitempty"`
		PendingBookings *int     `json:"pending_bookings,omitempty"`
		RatingAvg       *float64 `json:"rating_avg,omitempty"`
		TotalReviews    *int     `json:"total_reviews,omitempty"`
		TotalServices   *int     `json:"total_services,omitempty"`
	} `json:"overview,omitempty"`
	ThisMonth *struct {
		NewCustomers  *int     `json:"new_customers,omitempty"`
		Revenue       *float64 `json:"revenue,omitempty"`
		TotalBookings *int     `json:"total_bookings,omitempty"`
	} `json:"this_month,omitempty"`
	ThisWeek *struct {
		NewCustomers  *int     `json:"new_customers,omitempty"`
		Revenue       *float64 `json:"revenue,omitempty"`
		TotalBookings *int     `json:"total_bookings,omitempty"`
	} `json:"this_week,omitempty"`
	Today *struct {
		CompletedSessions *int     `json:"completed_sessions,omitempty"`
		Revenue           *float64 `json:"revenue,omitempty"`
		TotalSessions     *int     `json:"total_sessions,omitempty"`
		UpcomingSessions  *int     `json:"upcoming_sessions,omitempty"`
	} `json:"today,omitempty"`
}

// VendorStatus defines model for VendorStatus.
type VendorStatus string

// AgeParam defines model for AgeParam.
type AgeParam = int

// BookingStatusParam defines model for BookingStatusParam.
type BookingStatusParam = BookingStatus

// CategoryParam defines model for CategoryParam.
type CategoryParam = string

// ChildIdParam defines model for ChildIdParam.
type ChildIdParam = int64

// CityParam defines model for CityParam.
type CityParam = string

// ClassTypeParam defines model for ClassTypeParam.
type ClassTypeParam string

// CoachIdParam defines model for CoachIdParam.
type CoachIdParam = int64

// DateParam defines model for DateParam.
type DateParam = openapi_types.Date

// DayParam defines model for DayParam.
type DayParam string

// DistrictParam defines model for DistrictParam.
type DistrictParam = string

// IdParam defines model for IdParam.
type IdParam = int64

// IsFeaturedParam defines model for IsFeaturedParam.
type IsFeaturedParam = bool

// LimitParam defines model for LimitParam.
type LimitParam = int

// MonthParam defines model for MonthParam.
type MonthParam = string

// PageParam defines model for PageParam.
type PageParam = int

// PaymentNumberParam defines model for PaymentNumberParam.
type PaymentNumberParam = string

// PeriodParam defines model for PeriodParam.
type PeriodParam string

// PriceMaxParam defines model for PriceMaxParam.
type PriceMaxParam = float64

// PriceMinParam defines model for PriceMinParam.
type PriceMinParam = float64

// RatingMinParam defines model for RatingMinParam.
type RatingMinParam = float64

// ReviewIdParam defines model for ReviewIdParam.
type ReviewIdParam = int64

// ServiceIdParam defines model for ServiceIdParam.
type ServiceIdParam = int64

// SessionIdParam defines model for SessionIdParam.
type SessionIdParam = int64

// SkillLevelParam defines model for SkillLevelParam.
type SkillLevelParam string

// UpcomingParam defines model for UpcomingParam.
type UpcomingParam = bool

// VendorStatusParam defines model for VendorStatusParam.
type VendorStatusParam = VendorStatus

// AdminVendorsResponse defines model for AdminVendorsResponse.
type AdminVendorsResponse struct {
	Data struct {
		Pagination *Pagination `json:"pagination,omitempty"`
		Vendors    *[]struct {
			Address       *string       `json:"address,omitempty"`
			Amenities     *[]string     `json:"amenities,omitempty"`
			BusinessName  *string       `json:"business_name,omitempty"`
			BusinessType  *BusinessType `json:"business_type,omitempty"`
			City          *string       `json:"city,omitempty"`
			CoverImage    *string       `json:"cover_image,omitempty"`
			CreatedAt     *time.Time    `json:"created_at,omitempty"`
			Description   *string       `json:"description,omitempty"`
			District      *string       `json:"district,omitempty"`
			Id            *int64        `json:"id,omitempty"`
			Latitude      *float64      `json:"latitude,omitempty"`
			Logo          *string       `json:"logo,omitempty"`
			Longitude     *float64      `json:"longitude,omitempty"`
			Phone         *string       `json:"phone,omitempty"`
			Photos        *[]string     `json:"photos,omitempty"`
			RatingAvg     *float64      `json:"rating_avg,omitempty"`
			Status        *VendorStatus `json:"status,omitempty"`
			TotalBookings *int          `json:"total_bookings,omitempty"`
			TotalReviews  *int          `json:"total_reviews,omitempty"`
			User          *struct {
				Email    *string `json:"email,omitempty"`
				FullName *string `json:"full_name,omitempty"`
				Phone    *string `json:"phone,omitempty"`
			} `json:"user,omitempty"`
			Verified *bool   `json:"verified,omitempty"`
			Whatsapp *string `json:"whatsapp,omitempty"`
		} `json:"vendors,omitempty"`
	} `json:"data"`
}

// BadRequestResponse defines model for BadRequestResponse.
type BadRequestResponse = DefaultErrorResponse

// BookingCancelledResponse defines model for BookingCancelledResponse.
type BookingCancelledResponse struct {
	Data struct {
		Booking *struct {
			RefundAmount *float64       `json:"refund_amount,omitempty"`
			RefundStatus *string        `json:"refund_status,omitempty"`
			Status       *BookingStatus `json:"status,omitempty"`
		} `json:"booking,omitempty"`
	} `json:"data"`
	Message *string `json:"message,omitempty"`
}

// BookingCreatedResponse defines model for BookingCreatedResponse.
type BookingCreatedResponse struct {
	Data struct {
		Booking *BookingDetail `json:"booking,omitempty"`
	} `json:"data"`
	Message *string `json:"message,omitempty"`
}

// BookingDetailResponse defines model for BookingDetailResponse.
type BookingDetailResponse struct {
	Data BookingDetail `json:"data"`
}

// BookingsListResponse defines model for BookingsListResponse.
type BookingsListResponse struct {
	Data []Booking `json:"data"`
}

// CategoriesResponse defines model for CategoriesResponse.
type CategoriesResponse struct {
	Data []Category `json:"data"`
}

// ChildResponse defines model for ChildResponse.
type ChildResponse struct {
	Data Child `json:"data"`
}

// ChildrenListResponse defines model for ChildrenListResponse.
type ChildrenListResponse struct {
	Data []Child `json:"data"`
}

// CoachCreatedResponse defines model for CoachCreatedResponse.
type CoachCreatedResponse struct {
	Data struct {
		Coach *Coach `json:"coach,omitempty"`
	} `json:"data"`
}

// ConflictResponse defines model for ConflictResponse.
type ConflictResponse = DefaultErrorResponse

// ForbiddenResponse defines model for ForbiddenResponse.
type ForbiddenResponse = DefaultErrorResponse

// InternalServerErrorResponse defines model for InternalServerErrorResponse.
type InternalServerErrorResponse = DefaultErrorResponse

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	Data struct {
		RefreshToken string `json:"refresh_token"`
		Token        string `json:"token"`
	} `json:"data"`
}

// NotFoundResponse defines model for NotFoundResponse.
type NotFoundResponse = DefaultErrorResponse

// PaymentMethodsResponse defines model for PaymentMethodsResponse.
type PaymentMethodsResponse struct {
	Data []PaymentMethod `json:"data"`
}

// PaymentStatusResponse defines model for PaymentStatusResponse.
type PaymentStatusResponse struct {
	Data struct {
		Amount  *float64 `json:"amount,omitempty"`
		Booking *struct {
			BookingNumber *string        `json:"booking_number,omitempty"`
			Status        *BookingStatus `json:"status,omitempty"`
		} `json:"booking,omitempty"`
		PaidAt        *time.Time `json:"paid_at,omitempty"`
		PaymentMethod *string    `json:"payment_method,omitempty"`
		PaymentNumber *string    `json:"payment_number,omitempty"`
		Status        *string    `json:"status,omitempty"`
	} `json:"data"`
}

// RegisterResponse defines model for RegisterResponse.
type RegisterResponse struct {
	Data struct {
		User User `json:"user"`
	} `json:"data"`
	Message *string `json:"message,omitempty"`
}

// RegisterVendorResponse defines model for RegisterVendorResponse.
type RegisterVendorResponse struct {
	Data struct {
		User   User   `json:"user"`
		Vendor Vendor `json:"vendor"`
	} `json:"data"`
	Message *string `json:"message,omitempty"`
}

// ReviewCreatedResponse defines model for ReviewCreatedResponse.
type ReviewCreatedResponse struct {
	Data struct {
		Review *Review `json:"review,omitempty"`
	} `json:"data"`
	Message *string `json:"message,omitempty"`
}

// ScheduleCreatedResponse defines model for ScheduleCreatedResponse.
type ScheduleCreatedResponse struct {
	Data struct {
		Schedule *Schedule `json:"schedule,omitempty"`
	} `json:"data"`
}

// ScheduleExceptionCreatedResponse defines model for ScheduleExceptionCreatedResponse.
type ScheduleExceptionCreatedResponse struct {
	Data struct {
		Message *string `json:"message,omitempty"`
	} `json:"data"`
}

// ServiceAvailabilityResponse defines model for ServiceAvailabilityResponse.
type ServiceAvailabilityResponse struct {
	Data struct {
		AvailableDates *[]AvailableDate `json:"available_dates,omitempty"`
		Exceptions     *[]struct {
			Date   *openapi_types.Date `json:"date,omitempty"`
			Reason *string             `json:"reason,omitempty"`
		} `json:"exceptions,omitempty"`
	} `json:"data"`
}

// ServiceCreatedResponse defines model for ServiceCreatedResponse.
type ServiceCreatedResponse struct {
	Data struct {
		Service *Service `json:"service,omitempty"`
	} `json:"data"`
}

// ServiceDetailResponse defines model for ServiceDetailResponse.
type ServiceDetailResponse struct {
	Data ServiceDetail `json:"data"`
}

// ServiceReviewsResponse defines model for ServiceReviewsResponse.
type ServiceReviewsResponse struct {
	Data struct {
		Pagination *Pagination    `json:"pagination,omitempty"`
		Reviews    *[]Review      `json:"reviews,omitempty"`
		Summary    *ReviewSummary `json:"summary,omitempty"`
	} `json:"data"`
}

// ServiceUpdatedResponse defines model for ServiceUpdatedResponse.
type ServiceUpdatedResponse struct {
	Data struct {
		Service *Service `json:"service,omitempty"`
	} `json:"data"`
}

// ServicesSearchResponse defines model for ServicesSearchResponse.
type ServicesSearchResponse struct {
	Data struct {
		Pagination *Pagination          `json:"pagination,omitempty"`
		Services   *[]ServiceWithVendor `json:"services,omitempty"`
	} `json:"data"`
}

// SessionCompletedResponse defines model for SessionCompletedResponse.
type SessionCompletedResponse struct {
	Data struct {
		Session *BookingSession `json:"session,omitempty"`
	} `json:"data"`
	Message *string `json:"message,omitempty"`
}

// StatisticsResponse defines model for StatisticsResponse.
type StatisticsResponse struct {
	Data Statistics `json:"data"`
}

// SuccessResponse defines model for SuccessResponse.
type SuccessResponse = map[string]interface{}

// UnauthorizedResponse defines model for UnauthorizedResponse.
type UnauthorizedResponse = DefaultErrorResponse

// VendorBookingsResponse defines model for VendorBookingsResponse.
type VendorBookingsResponse struct {
	Data []VendorBooking `json:"data"`
}

// VendorCoachesResponse defines model for VendorCoachesResponse.
type VendorCoachesResponse struct {
	Data []Coach `json:"data"`
}

// VendorDashboardResponse defines model for VendorDashboardResponse.
type VendorDashboardResponse struct {
	Data VendorDashboard `json:"data"`
}

// VendorServicesResponse defines model for VendorServicesResponse.
type VendorServicesResponse struct {
	Data struct {
		Pagination *Pagination `json:"pagination,omitempty"`
		Services   *[]Service  `json:"services,omitempty"`
	} `json:"data"`
}

// AddChildRequest defines model for AddChildRequest.
type AddChildRequest struct {
	DateOfBirth  openapi_types.Date `json:"date_of_birth"`
	Gender       Gender             `json:"gender"`
	Name         string             `json:"name"`
	Nickname     *string            `json:"nickname,omitempty"`
	SpecialNeeds *string            `json:"special_needs,omitempty"`
}

// AddCoachRequest defines model for AddCoachRequest.
type AddCoachRequest struct {
	Bio            *string `json:"bio,omitempty"`
	Certifications *[]struct {
		Issuer *string `json:"issuer,omitempty"`
		Name   *string `json:"name,omitempty"`
		Year   *int    `json:"year,omitempty"`
	} `json:"certifications,omitempty"`
	Education       *string   `json:"education,omitempty"`
	Email           string    `json:"email"`
	ExperienceYears *int      `json:"experience_years,omitempty"`
	FullName        string    `json:"full_name"`
	Phone           string    `json:"phone"`
	Specializations *[]string `json:"specializations,omitempty"`
}

// AddScheduleExceptionRequest defines model for AddScheduleExceptionRequest.
type AddScheduleExceptionRequest struct {
	ExceptionDate openapi_types.Date `json:"exception_date"`
	Reason        string             `json:"reason"`
}

// AddScheduleRequest defines model for AddScheduleRequest.
type AddScheduleRequest struct {
	AvailableSlots int    `json:"available_slots"`
	CoachId        *int64 `json:"coach_id,omitempty"`
	DayOfWeek      int    `json:"day_of_week"`
	EndTime        string `json:"end_time"`
	StartTime      string `json:"start_time"`
}

// AssignCoachRequest defines model for AssignCoachRequest.
type AssignCoachRequest struct {
	CoachId   int64 `json:"coach_id"`
	IsPrimary *bool `json:"is_primary,omitempty"`
}

// CancelBookingRequest defines model for CancelBookingRequest.
type CancelBookingRequest struct {
	CancellationReason string `json:"cancellation_reason"`
}

// CompleteSessionRequest defines model for CompleteSessionRequest.
type CompleteSessionRequest struct {
	Attended   bool    `json:"attended"`
	CoachNotes *string `json:"coach_notes,omitempty"`
}

// CreateBookingRequest defines model for CreateBookingRequest.
type CreateBookingRequest struct {
	BookingType BookingType `json:"booking_type"`
	ChildId     int64       `json:"child_id"`
	CoachId     *int64      `json:"coach_id,omitempty"`
	ParentNotes *string     `json:"parent_notes,omitempty"`
	ServiceId   int64       `json:"service_id"`
	Sessions    []struct {
		EndTime     *string            `json:"end_time,omitempty"`
		ScheduleId  *int64             `json:"schedule_id,omitempty"`
		SessionDate openapi_types.Date `json:"session_date"`
		StartTime   string             `json:"start_time"`
	} `json:"sessions"`
}

// CreateReviewRequest defines model for CreateReviewRequest.
type CreateReviewRequest struct {
	BookingId      int64   `json:"booking_id"`
	ChildEnjoyed   *bool   `json:"child_enjoyed,omitempty"`
	Rating         int     `json:"rating"`
	ReviewText     *string `json:"review_text,omitempty"`
	WouldRecommend *bool   `json:"would_recommend,omitempty"`
}

// CreateServiceRequest defines model for CreateServiceRequest.
type CreateServiceRequest struct {
	AgeMax          *int        `json:"age_max,omitempty"`
	AgeMin          *int        `json:"age_min,omitempty"`
	CategoryId      int64       `json:"category_id"`
	ClassType       ClassType   `json:"class_type"`
	Description     string      `json:"description"`
	DurationMinutes int         `json:"duration_minutes"`
	MaxParticipants *int        `json:"max_participants,omitempty"`
	Name            string      `json:"name"`
	Package12Price  *float64    `json:"package_12_price,omitempty"`
	Package4Price   *float64    `json:"package_4_price,omitempty"`
	Package8Price   *float64    `json:"package_8_price,omitempty"`
	PricePerSession float64     `json:"price_per_session"`
	Requirements    *string     `json:"requirements,omitempty"`
	SkillLevel      *SkillLevel `json:"skill_level,omitempty"`
	TrialPrice      *float64    `json:"trial_price,omitempty"`
	WhatWillLearn   *string     `json:"what_will_learn,omitempty"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// PaymentCallbackRequest defines model for PaymentCallbackRequest.
type PaymentCallbackRequest struct {
	GrossAmount       *string `json:"gross_amount,omitempty"`
	OrderId           *string `json:"order_id,omitempty"`
	StatusCode        *string `json:"status_code,omitempty"`
	TransactionStatus *string `json:"transaction_status,omitempty"`
}

// RegisterParentRequest defines model for RegisterParentRequest.
type RegisterParentRequest struct {
	City     *string `json:"city,omitempty"`
	District *string `json:"district,omitempty"`
	Email    string  `json:"email"`
	FullName string  `json:"full_name"`
	Password string  `json:"password"`
	Phone    string  `json:"phone"`
}

// RegisterVendorRequest defines model for RegisterVendorRequest.
type RegisterVendorRequest struct {
	Address      string       `json:"address"`
	BusinessName string       `json:"business_name"`
	BusinessType BusinessType `json:"business_type"`
	City         string       `json:"city"`
	District     *string      `json:"district,omitempty"`
	Email        string       `json:"email"`
	FullName     string       `json:"full_name"`
	Password     string       `json:"password"`
	Phone        string       `json:"phone"`
	Whatsapp     *string      `json:"whatsapp,omitempty"`
}

// RejectVendorRequest defines model for RejectVendorRequest.
type RejectVendorRequest struct {
	Reason string `json:"reason"`
}

// RespondToReviewRequest defines model for RespondToReviewRequest.
type RespondToReviewRequest struct {
	Response string `json:"response"`
}

// UpdateChildRequest defines model for UpdateChildRequest.
type UpdateChildRequest struct {
	Name         *string `json:"name,omitempty"`
	Nickname     *string `json:"nickname,omitempty"`
	SpecialNeeds *string `json:"special_needs,omitempty"`
}

// UpdateServiceRequest defines model for UpdateServiceRequest.
type UpdateServiceRequest struct {
	Description     *string        `json:"description,omitempty"`
	Name            *string        `json:"name,omitempty"`
	PricePerSession *float64       `json:"price_per_session,omitempty"`
	Status          *ServiceStatus `json:"status,omitempty"`
	TrialPrice      *float64       `json:"trial_price,omitempty"`
}

// GetStatisticsParams defines parameters for GetStatistics.
type GetStatisticsParams struct {
	Period *GetStatisticsParamsPeriod `form:"period,omitempty" json:"period,omitempty"`
}

// GetStatisticsParamsPeriod defines parameters for GetStatistics.
type GetStatisticsParamsPeriod string

// GetVendorsParams defines parameters for GetVendors.
type GetVendorsParams struct {
	Status *VendorStatusParam `form:"status,omitempty" json:"status,omitempty"`
	Page   *PageParam         `form:"page,omitempty" json:"page,omitempty"`
	Limit  *LimitParam        `form:"limit,omitempty" json:"limit,omitempty"`
}

// RejectVendorJSONBody defines parameters for RejectVendor.
type RejectVendorJSONBody struct {
	Reason string `json:"reason"`
}

// GetBookingsParams defines parameters for GetBookings.
type GetBookingsParams struct {
	Status   *BookingStatusParam `form:"status,omitempty" json:"status,omitempty"`
	ChildId  *ChildIdParam       `form:"child_id,omitempty" json:"child_id,omitempty"`
	Upcoming *UpcomingParam      `form:"upcoming,omitempty" json:"upcoming,omitempty"`
	Page     *PageParam          `form:"page,omitempty" json:"page,omitempty"`
	Limit    *LimitParam         `form:"limit,omitempty" json:"limit,omitempty"`
}

// CreateBookingJSONBody defines parameters for CreateBooking.
type CreateBookingJSONBody struct {
	BookingType BookingType `json:"booking_type"`
	ChildId     int64       `json:"child_id"`
	CoachId     *int64      `json:"coach_id,omitempty"`
	ParentNotes *string     `json:"parent_notes,omitempty"`
	ServiceId   int64       `json:"service_id"`
	Sessions    []struct {
		EndTime     *string            `json:"end_time,omitempty"`
		ScheduleId  *int64             `json:"schedule_id,omitempty"`
		SessionDate openapi_types.Date `json:"session_date"`
		StartTime   string             `json:"start_time"`
	} `json:"sessions"`
}

// CancelBookingJSONBody defines parameters for CancelBooking.
type CancelBookingJSONBody struct {
	CancellationReason string `json:"cancellation_reason"`
}

// AddChildJSONBody defines parameters for AddChild.
type AddChildJSONBody struct {
	DateOfBirth  openapi_types.Date `json:"date_of_birth"`
	Gender       Gender             `json:"gender"`
	Name         string             `json:"name"`
	Nickname     *string            `json:"nickname,omitempty"`
	SpecialNeeds *string            `json:"special_needs,omitempty"`
}

// UpdateChildJSONBody defines parameters for UpdateChild.
type UpdateChildJSONBody struct {
	Name         *string `json:"name,omitempty"`
	Nickname     *string `json:"nickname,omitempty"`
	SpecialNeeds *string `json:"special_needs,omitempty"`
}

// LoginUserJSONBody defines parameters for LoginUser.
type LoginUserJSONBody struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// PaymentCallbackJSONBody defines parameters for PaymentCallback.
type PaymentCallbackJSONBody struct {
	GrossAmount       *string `json:"gross_amount,omitempty"`
	OrderId           *string `json:"order_id,omitempty"`
	StatusCode        *string `json:"status_code,omitempty"`
	TransactionStatus *string `json:"transaction_status,omitempty"`
}

// RegisterParentJSONBody defines parameters for RegisterParent.
type RegisterParentJSONBody struct {
	City     *string `json:"city,omitempty"`
	District *string `json:"district,omitempty"`
	Email    string  `json:"email"`
	FullName string  `json:"full_name"`
	Password string  `json:"password"`
	Phone    string  `json:"phone"`
}

// RegisterVendorJSONBody defines parameters for RegisterVendor.
type RegisterVendorJSONBody struct {
	Address      string       `json:"address"`
	BusinessName string       `json:"business_name"`
	BusinessType BusinessType `json:"business_type"`
	City         string       `json:"city"`
	District     *string      `json:"district,omitempty"`
	Email        string       `json:"email"`
	FullName     string       `json:"full_name"`
	Password     string       `json:"password"`
	Phone        string       `json:"phone"`
	Whatsapp     *string      `json:"whatsapp,omitempty"`
}

// CreateReviewJSONBody defines parameters for CreateReview.
type CreateReviewJSONBody struct {
	BookingId      int64   `json:"booking_id"`
	ChildEnjoyed   *bool   `json:"child_enjoyed,omitempty"`
	Rating         int     `json:"rating"`
	ReviewText     *string `json:"review_text,omitempty"`
	WouldRecommend *bool   `json:"would_recommend,omitempty"`
}

// SearchServicesParams defines parameters for SearchServices.
type SearchServicesParams struct {
	// Category Category slug (swimming, math-tutoring, art-drawing)
	Category *CategoryParam `form:"category,omitempty" json:"category,omitempty"`
	City     *CityParam     `form:"city,omitempty" json:"city,omitempty"`
	District *DistrictParam `form:"district,omitempty" json:"district,omitempty"`

	// Age Child age in years
	Age        *AgeParam                       `form:"age,omitempty" json:"age,omitempty"`
	SkillLevel *SearchServicesParamsSkillLevel `form:"skill_level,omitempty" json:"skill_level,omitempty"`
	ClassType  *SearchServicesParamsClassType  `form:"class_type,omitempty" json:"class_type,omitempty"`
	Day        *SearchServicesParamsDay        `form:"day,omitempty" json:"day,omitempty"`
	PriceMin   *PriceMinParam                  `form:"price_min,omitempty" json:"price_min,omitempty"`
	PriceMax   *PriceMaxParam                  `form:"price_max,omitempty" json:"price_max,omitempty"`
	RatingMin  *RatingMinParam                 `form:"rating_min,omitempty" json:"rating_min,omitempty"`
	IsFeatured *IsFeaturedParam                `form:"is_featured,omitempty" json:"is_featured,omitempty"`
	Page       *PageParam                      `form:"page,omitempty" json:"page,omitempty"`
	Limit      *LimitParam                     `form:"limit,omitempty" json:"limit,omitempty"`
}

// SearchServicesParamsSkillLevel defines parameters for SearchServices.
type SearchServicesParamsSkillLevel string

// SearchServicesParamsClassType defines parameters for SearchServices.
type SearchServicesParamsClassType string

// SearchServicesParamsDay defines parameters for SearchServices.
type SearchServicesParamsDay string

// GetServiceAvailabilityParams defines parameters for GetServiceAvailability.
type GetServiceAvailabilityParams struct {
	// Month Month in YYYY-MM format
	Month MonthParam `form:"month" json:"month"`
}

// GetServiceReviewsParams defines parameters for GetServiceReviews.
type GetServiceReviewsParams struct {
	Page  *PageParam  `form:"page,omitempty" json:"page,omitempty"`
	Limit *LimitParam `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetVendorBookingsParams defines parameters for GetVendorBookings.
type GetVendorBookingsParams struct {
	Date   *DateParam          `form:"date,omitempty" json:"date,omitempty"`
	Status *BookingStatusParam `form:"status,omitempty" json:"status,omitempty"`
	Page   *PageParam          `form:"page,omitempty" json:"page,omitempty"`
	Limit  *LimitParam         `form:"limit,omitempty" json:"limit,omitempty"`
}

// AddCoachJSONBody defines parameters for AddCoach.
type AddCoachJSONBody struct {
	Bio            *string `json:"bio,omitempty"`
	Certifications *[]struct {
		Issuer *string `json:"issuer,omitempty"`
		Name   *string `json:"name,omitempty"`
		Year   *int    `json:"year,omitempty"`
	} `json:"certifications,omitempty"`
	Education       *string   `json:"education,omitempty"`
	Email           string    `json:"email"`
	ExperienceYears *int      `json:"experience_years,omitempty"`
	FullName        string    `json:"full_name"`
	Phone           string    `json:"phone"`
	Specializations *[]string `json:"specializations,omitempty"`
}

// RespondToReviewJSONBody defines parameters for RespondToReview.
type RespondToReviewJSONBody struct {
	Response string `json:"response"`
}

// AddScheduleExceptionJSONBody defines parameters for AddScheduleException.
type AddScheduleExceptionJSONBody struct {
	ExceptionDate openapi_types.Date `json:"exception_date"`
	Reason        string             `json:"reason"`
}

// GetVendorServicesParams defines parameters for GetVendorServices.
type GetVendorServicesParams struct {
	Page  *PageParam  `form:"page,omitempty" json:"page,omitempty"`
	Limit *LimitParam `form:"limit,omitempty" json:"limit,omitempty"`
}

// CreateServiceJSONBody defines parameters for CreateService.
type CreateServiceJSONBody struct {
	AgeMax          *int        `json:"age_max,omitempty"`
	AgeMin          *int        `json:"age_min,omitempty"`
	CategoryId      int64       `json:"category_id"`
	ClassType       ClassType   `json:"class_type"`
	Description     string      `json:"description"`
	DurationMinutes int         `json:"duration_minutes"`
	MaxParticipants *int        `json:"max_participants,omitempty"`
	Name            string      `json:"name"`
	Package12Price  *float64    `json:"package_12_price,omitempty"`
	Package4Price   *float64    `json:"package_4_price,omitempty"`
	Package8Price   *float64    `json:"package_8_price,omitempty"`
	PricePerSession float64     `json:"price_per_session"`
	Requirements    *string     `json:"requirements,omitempty"`
	SkillLevel      *SkillLevel `json:"skill_level,omitempty"`
	TrialPrice      *float64    `json:"trial_price,omitempty"`
	WhatWillLearn   *string     `json:"what_will_learn,omitempty"`
}

// UpdateServiceJSONBody defines parameters for UpdateService.
type UpdateServiceJSONBody struct {
	Description     *string        `json:"description,omitempty"`
	Name            *string        `json:"name,omitempty"`
	PricePerSession *float64       `json:"price_per_session,omitempty"`
	Status          *ServiceStatus `json:"status,omitempty"`
	TrialPrice      *float64       `json:"trial_price,omitempty"`
}

// AssignCoachToServiceJSONBody defines parameters for AssignCoachToService.
type AssignCoachToServiceJSONBody struct {
	CoachId   int64 `json:"coach_id"`
	IsPrimary *bool `json:"is_primary,omitempty"`
}

// AddScheduleJSONBody defines parameters for AddSchedule.
type AddScheduleJSONBody struct {
	AvailableSlots int    `json:"available_slots"`
	CoachId        *int64 `json:"coach_id,omitempty"`
	DayOfWeek      int    `json:"day_of_week"`
	EndTime        string `json:"end_time"`
	StartTime      string `json:"start_time"`
}

// CompleteSessionJSONBody defines parameters for CompleteSession.
type CompleteSessionJSONBody struct {
	Attended   bool    `json:"attended"`
	CoachNotes *string `json:"coach_notes,omitempty"`
}

// RejectVendorJSONRequestBody defines body for RejectVendor for application/json ContentType.
type RejectVendorJSONRequestBody RejectVendorJSONBody

// CreateBookingJSONRequestBody defines body for CreateBooking for application/json ContentType.
type CreateBookingJSONRequestBody CreateBookingJSONBody

// CancelBookingJSONRequestBody defines body for CancelBooking for application/json ContentType.
type CancelBookingJSONRequestBody CancelBookingJSONBody

// AddChildJSONRequestBody defines body for AddChild for application/json ContentType.
type AddChildJSONRequestBody AddChildJSONBody

// UpdateChildJSONRequestBody defines body for UpdateChild for application/json ContentType.
type UpdateChildJSONRequestBody UpdateChildJSONBody

// LoginUserJSONRequestBody defines body for LoginUser for application/json ContentType.
type LoginUserJSONRequestBody LoginUserJSONBody

// PaymentCallbackJSONRequestBody defines body for PaymentCallback for application/json ContentType.
type PaymentCallbackJSONRequestBody PaymentCallbackJSONBody

// RegisterParentJSONRequestBody defines body for RegisterParent for application/json ContentType.
type RegisterParentJSONRequestBody RegisterParentJSONBody

// RegisterVendorJSONRequestBody defines body for RegisterVendor for application/json ContentType.
type RegisterVendorJSONRequestBody RegisterVendorJSONBody

// CreateReviewJSONRequestBody defines body for CreateReview for application/json ContentType.
type CreateReviewJSONRequestBody CreateReviewJSONBody

// AddCoachJSONRequestBody defines body for AddCoach for application/json ContentType.
type AddCoachJSONRequestBody AddCoachJSONBody

// RespondToReviewJSONRequestBody defines body for RespondToReview for application/json ContentType.
type RespondToReviewJSONRequestBody RespondToReviewJSONBody

// AddScheduleExceptionJSONRequestBody defines body for AddScheduleException for application/json ContentType.
type AddScheduleExceptionJSONRequestBody AddScheduleExceptionJSONBody

// CreateServiceJSONRequestBody defines body for CreateService for application/json ContentType.
type CreateServiceJSONRequestBody CreateServiceJSONBody

// UpdateServiceJSONRequestBody defines body for UpdateService for application/json ContentType.
type UpdateServiceJSONRequestBody UpdateServiceJSONBody

// AssignCoachToServiceJSONRequestBody defines body for AssignCoachToService for application/json ContentType.
type AssignCoachToServiceJSONRequestBody AssignCoachToServiceJSONBody

// AddScheduleJSONRequestBody defines body for AddSchedule for application/json ContentType.
type AddScheduleJSONRequestBody AddScheduleJSONBody

// CompleteSessionJSONRequestBody defines body for CompleteSession for application/json ContentType.
type CompleteSessionJSONRequestBody CompleteSessionJSONBody

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
